<!--
 Copyright 2006-2012 The Scriptella Project Team.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<project name="scriptella-template" default="" xmlns:artifact="urn:maven-artifact-ant">
    <description>Base build for submodules</description>
    <property file="${basedir}/custom.build.properties"/>
    <property file="${basedir}/build.properties"/>
    <property file="${basedir}/../custom.build.properties"/>
    <property file="${basedir}/../build.properties"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="jar.name" value="${ant.project.name}.jar"/>
    <property name="src-jar.name" value="${ant.project.name}-sources.jar"/>
    <property name="doc-jar.name" value="${ant.project.name}-javadoc.jar"/>
    <property name="tmp.dir" value="${build.dir}/tmp"/>
    <property name="classes.dir" value="${tmp.dir}/classes"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="java.dir" value="${src.dir}/java"/>
    <property name="conf.dir" value="${src.dir}/conf"/>
    <property name="test.dir" value="${src.dir}/test"/>
    <property name="tests.tmp.dir" value="${tmp.dir}/tests"/>
    <property name="tests.xml.report.dir" value="${tmp.dir}/junit-xml"/>
    <property name="root.dir" value="${basedir}/.."/>
    <property name="javadoc.dest.dir" value="${build.dir}/api"/>
    <tstamp/>

    <xmlproperty file="${root.dir}/pom.xml" prefix="pom.xml" />
    <property name="version" value="${pom.xml.project.version}"/>

    <target name="init" depends="clean">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}"/>
        <available file="${conf.dir}" property="resources_present"/>
    </target>

    <target name="clean" unless="noclean">
        <delete dir="${tmp.dir}" failonerror="no"/>
    </target>

    <target name="compile" depends="init">
        <javac srcdir="${java.dir}" destdir="${classes.dir}" classpathref="classpath"
               debug="on" debuglevel="lines,vars,source" target="1.5" source="1.5"/>
    </target>

    <target name="resources" if="resources_present" depends="init">
        <copy todir="${classes.dir}">
            <fileset dir="${conf.dir}" includes="**"/>
        </copy>
    </target>

    <target name="jar" depends="compile, resources">
        <copy todir="${tmp.dir}" file="../build-templates/MANIFEST.MF" overwrite="true">
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>

        <jar basedir="${classes.dir}" destfile="${build.dir}/${jar.name}" manifest="${tmp.dir}/MANIFEST.MF"/>
    </target>

    <target name="test" depends="compile, resources" description="Runs module tests and produce XML report">
        <mkdir dir="${tests.tmp.dir}"/>
        <javac srcdir="${test.dir}" destdir="${tests.tmp.dir}"
               debug="on" debuglevel="lines,vars,source">
            <classpath>
                <path refid="test.classpath"/>
                <pathelement location="${classes.dir}"/>
            </classpath>
        </javac>
        <copy todir="${tests.tmp.dir}">
            <fileset dir="${test.dir}" includes="**/*.properties **/*.xml **/*.sql"/>
        </copy>
        <mkdir dir="${tests.xml.report.dir}"/>
        <!--Executing junit-->
        <junit fork="on" forkmode="once" errorproperty="unit.tests.failed" dir="${root.dir}">
            <classpath >
                <path refid="test.classpath"/>
                <pathelement location="${classes.dir}"/>
                <pathelement location="${tests.tmp.dir}"/>
                <pathelement location="${basedir}/lib"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${tests.xml.report.dir}">
                <fileset dir="${test.dir}" includes="**/*Test.java"/>
            </batchtest>
        </junit>
    </target>

    <target name="prepare-deploy">
        <description>
            Prepare publication of libraries to Maven release repository: create -sources.jar and -javadoc.jar,
            to be signed with gpg.
        </description>

        <jar basedir="${java.dir}" destfile="${build.dir}/${src-jar.name}" manifest="${tmp.dir}/MANIFEST.MF"/>
        <gpg file="${build.dir}/${src-jar.name}"/>

        <delete dir="${javadoc.dest.dir}" failonerror="no"/>
        <mkdir dir="${javadoc.dest.dir}"/>
        <xmlproperty file="pom.xml" prefix="local.pom.xml" />
        <javadoc destdir="${javadoc.dest.dir}" includenosourcepackages="true"
                 use="true" windowtitle="${local.pom.xml.project.name} API Documentation">
            <classpath refid="test.classpath"/>
            <classpath path="${ant.jar}"/>
            <packageset dir="${java.dir}"/>
            <doctitle><![CDATA[<h1>${local.pom.xml.project.name} API Documentation</h1>]]></doctitle>
            <bottom>
                <![CDATA[<i>Copyright &#169; Copyright 2006-2009 The <a href="http://scriptella.javaforge.com">Scriptella Project</a> Team.</i>]]></bottom>
        </javadoc>
        <jar basedir="${javadoc.dest.dir}" destfile="${build.dir}/${doc-jar.name}" manifest="${tmp.dir}/MANIFEST.MF"/>
        <gpg file="${build.dir}/${doc-jar.name}"/>
    </target>

    <target name="deploy" depends="prepare-deploy">
        <description>
            Publish libraries to Maven repositories, snapshot or release depending on current
            version in pom.xml. Requires maven-ant-tasks.jar to be specified in build.properties
        </description>

        <gpg file="pom.xml"/>
        <gpg file="${build.dir}/${jar.name}"/>
        <artifact:deploy file="${build.dir}/${jar.name}">
          <pom file="pom.xml" />
          <attach file="pom.xml.asc" type="pom.asc"/>
          <attach file="${build.dir}/${jar.name}.asc" type="jar.asc"/>
          <attach file="${build.dir}/${src-jar.name}" classifier="sources"/>
          <attach file="${build.dir}/${src-jar.name}.asc" classifier="sources" type="jar.asc"/>
          <attach file="${build.dir}/${doc-jar.name}" classifier="javadoc"/>
          <attach file="${build.dir}/${doc-jar.name}.asc" classifier="javadoc" type="jar.asc"/>
        </artifact:deploy>
    </target>
</project>