<!--
 Copyright 2006 The Scriptella Project Team.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<project name="scriptella" default="jar">
    <description>
        Build file for Scriptella Project.
        Use build.properties/custom.build.properties to customize its behaviour.
    </description>
    <property file="custom.build.properties"/>
    <property file="build.properties"/>
    <property file="version.properties"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="core" value="${basedir}/core"/>
    <property name="tools" value="${basedir}/tools"/>
    <property name="drivers" value="${basedir}/drivers"/>
    <property name="samples" value="${basedir}/samples"/>
    <property name="version" value="0.1-dev"/>
    <property name="tmp.dir" value="${build.dir}/tmp"/>
    <property name="reports.dir" value="${build.dir}/reports"/>
    <property name="tests.report.dir" value="${reports.dir}/junit"/>
    <property name="coverage.report.dir" value="${reports.dir}/coverage"/>
    <property name="tests.tmp.dir" value="${tmp.dir}/test"/>
    <property name="tests.xml.report.dir" value="${tests.tmp.dir}/junit-xml"/>
    <property name="instrumented.dir" value="${tmp.dir}/instrumented"/>
    <property name="jar.name" value="scriptella.jar"/>
    <property name="zip.name" value="scriptella-${version}.zip"/>
    <property name="src.zip.name" value="scriptella-${version}-src.zip"/>
    <property name="examples.zip.name" value="scriptella-examples-${version}.zip"/>

    <!--Classpath to use for JUnit tests execution -->
    <path id="tests.classpath">
        <pathelement location="${lib.dir}/hsqldb.jar"/>
        <pathelement location="${tests.tmp.dir}"/>
    </path>

    <target name="clean" unless="noclean">
        <description>
            Optional temp files cleanup.
        </description>
        <delete dir="${tmp.dir}" failonerror="no"/>
    </target>

    <target name="jar" depends="clean">
        <description>
            Produces main jar containing all required dependencies
        </description>
        <ant dir="${core}" inheritall="false"/>
        <ant dir="${tools}" inheritall="false"/>
        <ant dir="${drivers}" inheritall="false"/>
        <copy todir="${build.dir}">
            <fileset dir="${core}/build" includes="*.jar"/>
            <fileset dir="${tools}/build" includes="*.jar"/>
            <fileset dir="${drivers}/build" includes="*.jar"/>
        </copy>
        <jar destfile="${build.dir}/${jar.name}">
            <fileset dir="${core}/build/tmp/classes" includes="**" excludes="META-INF/*"/>
            <fileset dir="${tools}/build/tmp/classes" includes="**" excludes="META-INF/*"/>
            <fileset dir="${drivers}/build/tmp/classes" includes="**" excludes="META-INF/*"/>
            <fileset file="${basedir}/version.properties"/>
            <zipfileset src="${lib.dir}/commons-jexl-1.0.jar" includes="**" excludes="META-INF/*"/>
            <zipfileset src="${lib.dir}/commons-logging-1.0.4.jar" includes="**" excludes="META-INF/*"/>
            <zipfileset dir="${lib.dir}" includes="*license*" prefix="META-INF"/>
            <zipfileset dir="${basedir}" includes="LICENSE NOTICE" prefix="META-INF"/>
            <manifest>
                <attribute name="Main-Class" value="scriptella.tools.ScriptsRunner"/>
                <attribute name="Specification-Title" value="Scriptella SQL Scripts Tool"/>
                <attribute name="Specification-Vendor" value="The Scriptella Project Team"/>
                <attribute name="Implementation-Title" value="scriptella"/>
                <attribute name="Implementation-Vendor" value="The Scriptella Project Team"/>
                <attribute name="Implementation-Version" value="${version} (Build ${build})"/>
            </manifest>
        </jar>
        <copy todir="${basedir}/samples/lib">
            <fileset file="${lib.dir}/hsqldb.jar"/>
            <fileset file="${build.dir}/${jar.name}"/>
        </copy>
    </target>

    <target name="zip" depends="jar">
        <description>Prepares binary distribution</description>
        <!--Validation-->
        <condition property="no_dtddoc">
            <available file="${dtddoc.dir}"/>
        </condition>
        <fail message="DTDDoc is required to build binary distribution. Set dtddoc.dir property.
        DTDDoc URL: http://dtddoc.sourceforge.net" unless="no_dtddoc"/>
        <!--End Validation-->
        <ant antfile="build-docs.xml" target="codereports"/>
        <delete file="${build.dir}/${zip.name}" failonerror="false"/>
        <zip destfile="${build.dir}/${zip.name}">
            <fileset dir="${basedir}" includes="lib/**"/>
            <fileset dir="${build.dir}" includes="scriptella*.jar docs/**"/>
        </zip>
    </target>

    <target name="examples" depends="jar">
        <description>Prepares examples distribution</description>
        <delete file="${build.dir}/${examples.zip.name}" failonerror="false"/>
        <zip destfile="${build.dir}/${examples.zip.name}">
            <fileset dir="${basedir}/samples" includes="**"/>
        </zip>
    </target>

    <target name="srczip">
        <description>Prepares src distribution</description>
        <delete file="${build.dir}/${src.zip.name}" failonerror="false"/>
        <zip destfile="${build.dir}/${src.zip.name}">
            <fileset dir="${basedir}" includes="samples/** lib/** core/src/** tools/src/** **/*build.xml"
                     excludes="samples/lib/**"/>
        </zip>
    </target>

    <target name="distrib" depends="zip, srczip, examples">
        <description>Prepares binary and src distribution</description>
    </target>

    <target name="instrument" if="coverage">
        <description>
            Instrument classes if cobertura coverage is on
        </description>
        <ant antfile="${basedir}/coverage.xml" target="instrument"/>
    </target>

    <target name="test" depends="jar">
        <description>
            Runs unit tests and produces reports in ${tests.report.dir}
        </description>
        <unjar src="${build.dir}/scriptella.jar" dest="${tests.tmp.dir}"/>
        <!--Calling instrumentation if coverage is on-->
        <antcall target="instrument"/>
        <javac srcdir="${core}/src/test" destdir="${tests.tmp.dir}"
               classpath="${build.dir}/scriptella.jar:${lib.dir}/hsqldb.jar"
               debug="on" debuglevel="lines,vars,source"/>
        <!--Copying resources-->
        <copy todir="${tests.tmp.dir}">
            <fileset dir="${core}/src/test" includes="**/*.properties **/*.sql **/*.xml"/>
        </copy>
        <mkdir dir="${tests.xml.report.dir}"/>

        <!--Executing junit-->
        <junit fork="on" forkmode="once" errorproperty="unit.tests.failed">
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${instrumented.dir}/cobertura.ser"/>
            <classpath refid="tests.classpath"/>
            <formatter type="xml"/>
            <batchtest todir="${tests.xml.report.dir}">
                <fileset dir="${core}/src/test">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <!--Deletes report dir to clear previous reports-->
        <delete dir="${tests.report.dir}" failonerror="no"/>
        <mkdir dir="${tests.report.dir}"/>
        <junitreport todir="${tests.report.dir}">
            <fileset dir="${tests.xml.report.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${tests.report.dir}"/>
        </junitreport>
        <fail if="unit.tests.failed" message="JUnit test failed see ${tests.report.dir}"/>
    </target>

    <target name="coverage" if="cobertura.dir">
        <description>
            Runs junit and produce reports including code coverage.
            Requires cobertura.dir to be specified in build.properties
        </description>
        <condition property="cobertura.notfound">
            <and>
                <isset property="cobertura.dir"/>
                <not>
                    <available file="${cobertura.dir}"/>
                </not>
            </and>
        </condition>
        <fail if="cobertura.notfound" message="cobertura.dir should point to exisiting directory"/>
        <property name="coverage" value="present"/>
        <!--Instrumented classpath to use for JUnit tests execution -->
        <path id="tests.classpath">
            <pathelement location="${lib.dir}/hsqldb.jar"/>
            <pathelement location="${instrumented.dir}"/>
            <pathelement location="${tests.tmp.dir}"/>
            <fileset dir="${cobertura.dir}">
                <include name="cobertura.jar"/>
                <include name="lib/**/*.jar"/>
            </fileset>
        </path>
        <antcall target="test"/>
        <ant antfile="${basedir}/coverage.xml" target="report"/>
    </target>


</project>
