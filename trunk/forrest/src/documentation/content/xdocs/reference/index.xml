<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "dtd/document-v20.dtd">
<document>
	<header>
		<title>Scriptella Reference Documentation</title>
		<authors>
			<person name="Fyodor Kupolov" email="kupolov@gmail.com"/>
		</authors>
		<notice>Work in progress</notice>
		<abstract class="pageBreakAfter">
			<img src="../images/site-logo.png" alt=""/>
		</abstract>
	</header>
	<body>
		<section>
			<title>Introduction</title>
			<p>Scriptella is a Java-based ETL and scripts execution tool. The primary scripting language is a plain old SQL executed by the JDBC bridge.
			At the same time other non-JDBC providers could be easily added allowing to mix SQL scripts with other scripting languages.</p>
			<p>The following diagram is an overview of the Scriptella execution model:</p>
			<figure src="../images/reference/intro.gif" alt="Architecture Overview"/>
			<section>
				<title>When to use</title>
				<p>There is no silver bullet and you have to pick a right tool aligned with your goals. Here is a list of scenarios when Scriptella may be a very helpful tool:</p>
				<ul>
					<li>Storing database SQL scripts. Scriptella allows you to easily execute SQL scripts without dependencies on database vendor SQL tools. Moreover you can reference BLOB content, e.g. files, and use other JDBC features in your scripts.</li>
					<li>Working with several datasources. For example gathering statistics from the one database and store it inside the other one</li>
					<li>If you prefer to write <source>SELECT * FROM Account WHERE login=?name</source> instead of using a "Smart Query Designer GUI"</li>
					<li>Test data generation. You don't have to store huge random filled test files - produce
                    test data during script execution.</li>
				</ul>
				<p>Of course there are situations when you'd probably try to find a better tool:</p>
				<ul>
					<li>Database replication,i.e. one-to-one copy of the database content. There are plenty of tools doing this job easier.</li>
				</ul>
			</section>
		</section>
		<section>
			<title>System Requirements</title>
			<p>Scriptella requires JDK or JRE version 5.0 or later to operate.</p>
			<p>The memory requirements are dependant on your script content and referenced connection providers. For example if in-process database connections are used inside a script we recommend to use at least 512Mb of RAM.</p>
		</section>
		<section>
			<title>Installation</title>
			<anchor id="INSTALLATION"/>
			<ul>
				<li>
					<a href="../download.html">Download</a> Scriptella binary distribution.</li>
				<li>Unpack it and add a &lt;SCRIPTELLA_DIR&gt;/bin to system path variable.</li>
				<li>Check if JRE has been installed correctly by running java -version. Alternatively JAVA_HOME may be used to specify JDK location.
				<p>Use <code>set PATH=%PATH%;SCRIPTELLA_DIR\bin</code> for Windows and <code>export PATH=${PATH}:SCRIPTELLA_DIR/bin</code> for Unix.</p>
				</li>
				<li>
					<em>Optional step:</em> Put JDBC drivers required by your scripts to &lt;SCRIPTELLA_DIR&gt;/lib directory
                    or directly specify classpath attribute in script connection elements.</li>
			</ul>
			<p>The binary distribution of Scriptella consists of the following directory layout:</p>
			<source>
+-+
  +--- bin - launch scripts
  |
  +--- docs - documentation
  |      +--- api - API Documentation (in Javadoc format)
  |      |
  |      +--- dtd - Scriptella DTD file and documentation in DTDDoc format.
  +--- lib - scriptella boot class path libraries loaded by launch scripts.
            </source>
		</section>
		<section>
			<title>Scripts Syntax</title>
			<note>For details about all XML elements consult a <a href="../docs/dtd/">Scriptella DTD Documentation</a>
			</note>
			<p>The following XML stanza briefly covers main Scriptella XML elements:</p>
			<source><![CDATA[
<!DOCTYPE scriptella SYSTEM "http://scriptella.javaforge.com/dtd/scriptella.dtd">
<scriptella>
    <description></description>
    <properties>
        <include href="script.properties"/>
        driver=org.jdcDriver
    </properties>
    <connection id="con1" driver="$driver" url="${url}" user="$user" password="12345678">
        driver.property=value
    </connection>
    <connection id="con2" driver="org.hsqldb.jdbcDriver" url="jdbc:hsqldb:file:db" user="sa" password=""/>
    <script connection-id="out">
	    <include href="dbschema.sql"/>
    </script>
    <query connection-id="in">
        SELECT * from Bug
        <script connection-id="out">
            INSERT INTO Bug VALUES (?ID, ?priority, ?summary, ?status);
        </script>
    </query>
</scriptella>]]></source>
			<p>&lt;scriptella&gt; is a root element of all Scriptella files.</p>
			<section>
				<title>&lt;properties&gt;</title>
				<p>In this element define properties to be substituted in other script elements. This concept is similar to
                Ant.</p>
				<p>&lt;include&gt; element is used to insert external content. This concept is almost identical to XInclude</p>
				<note>The values of properties defined in this element are overridden by system properties or other
                external properties depending on execution environment, e.g. Ant properties.</note>
			</section>
			<section>
				<title>&lt;connection&gt;</title>
				<p>Elements of this type define connections to different datasources to work with.
                    A set of required attributes depends on driver. For example JDBC drivers require
                    driver, url, user and password attributes. Additionally you may specify catalog/schema attributes.</p>
				<p>
					<strong>id</strong> attribute is required if you declare more than one connections inside your script.
                    The value of this attribute is used to reference the connection in scripts and queries.</p>
				<p>
					<strong>classpath</strong> attribute is used specify additional classpath to load driver libraries. Alternatively you may
                add drivers jars to scriptella boot classpath (SCRIPTELLA_DIR/lib directory or in Ant taskdef classpath).
                    Boot classpath libraries take precedence over libraries specified connection classpath attribute.
                </p>
				<p>Use element's content to pass properties into connection. Several driver also support
                connection properties in URL string.</p>
			</section>
			<fixme author="ejboy">Describe all elements</fixme>
		</section>
		<section>
			<title>Expressions and Properties Substitution</title>
			<p>Scriptella supports properties substitution and expression evaluation based on the following syntax:</p>
			<ul>
				<li>$Property_Name - inserts a value of the specified property</li>
				<li>${expression} - inserts a value of the expression evaluation.
                    <a href="http://jakarta.apache.org/commons/jexl">JEXL</a> syntax is used for expressions.</li>
				<li>?Propery_Name or ?{expression} are used only in queries and scripts to set prepared statement parameters</li>
			</ul>
			<warning>
                In sql scripts and queries try to minimize usages of <strong>$</strong>, use <strong>?</strong> instead.
                In this case prepared statements may be cached thus increasing the performance of hot spot sections evaluated multiple times.
                Use $ for direct substitution only if you have problems passing prepared statement parameters via ?, ?{} syntax.
            </warning>
			<note>
                This syntax is only valid for Scriptella configuration elements and SQL scripts processed by JDBC Provider,
                other providers may not support properties/expressions substitution.
                Consult JDBC Provider Javadoc for more details.
            </note>
			<section>
				<title>Implicit Variables</title>
				<p>The following implicit variables are available in scripts and queries:</p>
				<table>
					<tr>
						<th>Variable</th>
						<th>Description</th>
						<th>Context</th>
					</tr>
					<tr>
						<td>
							<code>this</code>
						</td>
						<td>This variables provides the following methods and properties:
                            <ul>
								<li>scriptFileURL - URL of the script file being executed</li>
								<li>file(relativeURL) - inserts a file with URL relative to a scriptFileURL. Useful for BLOB parameters.</li>
							</ul>
						</td>
						<td>Query/Script</td>
					</tr>
					<tr>
						<td>
							<code>rownum</code>
						</td>
						<td>Represents row number of query result set. Starts with 1.</td>
						<td>Nested elements of Query</td>
					</tr>
				</table>
				<p>Additionally each query produces a set of implicit variables corresponding to selected column names. These variables are available in nested elements.
                Columns may also be referenced using a result set column number, e.g. ?1, ?2 ,...</p>
			</section>
			<section>
				<title>Examples</title>
				<p>Execute a query for table specified by TABLE  property and inserts the first row into TABLE2</p>
				<source><![CDATA[
    <query>
        SELECT V1, V2, V3 from $TABLE;
        <script if="rownum==1">
            INSERT INTO $TABLE2 VALUES (?V1, ?{V2+V3});
        </script>
    </query>]]></source>
			</section>
		</section>
		<section>
			<title>Command Line Execution</title>
			<p>If you followed the <a href="#INSTALLATION">Installation</a> instructions running Scriptella is simple - just type <code>scriptella</code> to execute a <code>script.xml</code> in the current directory.</p>
			<p>The Scriptella launching script loads all jars from SCRIPTELLA_DIR/lib directory and adds them to executed script(s) class path.</p>
			<p>Alternatively a standard java launcher may be used to run a script:
			<code>java -jar scriptella.jar [options] [file1] [file2] ... [fileN]</code>. It is assumed that the scriptella.jar file from the binary distribution is available in the current directory.</p>
			<note label="Important">Java launcher does NOT load jars from lib directory so you would have to specify additional class path elements in script file connection declarations or use java -Xbootclasspath/a:path/to/driver1.jar;path/to/driver2.jar -jar scriptella.jar to overcome -jar option limitation.</note>
			<section>
				<title>Command Line Options</title>
				<p>The scriptella launcher has the following invocation syntax:</p>
				<source>scriptella [options] [file1] [file2] ... [fileN]</source>
				<p>File names/paths are specified after options and separated by spaces.</p>
				<table>
					<tr>
						<td>-help, -h</td>
						<td>display help</td>
					</tr>
					<tr>
						<td>-debug, -d</td>
						<td>print debugging information</td>
					</tr>
					<tr>
						<td>-quiet, -q</td>
						<td>be extra quiet</td>
					</tr>
				</table>
			</section>
			<fixme author="ejboy">Describe command line tools</fixme>
		</section>
		<section>
			<title>Ant Integration</title>
			<section>
				<title>System requirements</title>
				<p>Ant 1.6 or later is recommended.</p>
			</section>
			<section>
				<title>Installation</title>
				<p>Use scriptella.jar from the binary distribution. This file contains all necessary classes and
                    resources for integration with Ant.</p>
				<p>In order to use scriptella as Ant task you will need the following taskdef declaration:</p>
				<source><![CDATA[<taskdef resource="antscriptella.properties" classpath="/path/to/scriptella.jar"/>]]></source>
				<p>You may also add paths to database drivers used inside the script:</p>
				<source><![CDATA[<taskdef resource="antscriptella.properties"
   <classpath>
       <pathelement location="/path/to/scriptella.jar">
       <pathelement location="lib/hsqldb.jar">
       <pathelement location="lib/jconn2.jar">
   </classpath>
</taskdef>]]></source>
			</section>
			<p>These drivers will be available on the boot classpath.
                In this case you don't have to specify classpath in &lt;connection&gt; elements.</p>
			<section>
				<title>Scriptella &quot;Execute&quot; Task</title>
				<section>
					<title>Parameters</title>
					<table>
						<tr>
							<th>Attribute</th>
							<th>Description</th>
							<th>Required</th>
						</tr>
						<tr>
							<td>file</td>
							<td>The script file to execute.</td>
							<td>Yes, unless a nested &lt;fileset&gt; element is used.</td>
						</tr>
						<tr>
							<td>inheritAll</td>
							<td>If true, pass Ant project properties to the Script Executor.</td>
							<td>No, default value is false.</td>
						</tr>
						<tr>
							<td>debug</td>
							<td>If true, print debugging information.</td>
							<td>No, default value is false.</td>
						</tr>
						<tr>
							<td>quiet</td>
							<td>If true, be extra quiet.</td>
							<td>No, default value is false.</td>
						</tr>
					</table>
				</section>
				<section>
					<title>Nested Elements</title>
					<p>The task supports nested
                        <a href="http://ant.apache.org/manual/CoreTypes/fileset.html">&lt;fileset&gt;</a>
                        element.
                    </p>
				</section>
				<section>
					<title>Examples</title>
					<p>
						<em>Executes script.xml file in the current directory:</em>
					</p>
					<source>&lt;execute/&gt;</source>
					<p>
						<em>Executes sql.xml file in the current directory:</em>
					</p>
					<source>&lt;execute file="sql.xml"/&gt;
                    </source>
					<p>
						<em>Executes all xml files in db directory:</em>
					</p>
					<source>&lt;execute&gt;
   &lt;fileset dir="db" includes="*.xml"/&gt;
&lt;/execute&gt;</source>
				</section>
			</section>
		</section>
		<section>
			<title>JDBC Adapters</title>
			<p>Scriptella is bundled with a set of adapters for popular
            JDBC drivers. You are free to use any JDBC vendor drivers, but
            the Scriptella adapters provide the following benefits:</p>
			<ul>
				<li>Simplified naming. No need to specify a full driver's class
                name, alias may be used, e.g. driver="hslqdb", "oracle" etc.</li>
				<li>Scriptella adapters are preconfigured for optimal performance, syntax parsing rules
                and other execution options, e.g. BLOB handling for oracle. In most cases
                you can specify a generic JDBC property, but using adapters simplifies
                switching between drivers and even a target platform e.g. Java/.Net</li>
			</ul>
			<p>Currently Scriptella provides the following adapters:</p>
			<table>
				<tr>
					<th>Adapter Name</th>
					<th>Scriptella Driver Name</th>
					<th>Native Driver</th>
					<th>Notes</th>
				</tr>
				<tr>
					<td>
						<a href="../docs/api/scriptella/driver/hsqldb/package-summary.html">HSQLDB</a>
					</td>
					<td>scriptella.driver.hsqldb.Driver</td>
					<td>org.hsqldb.jdbcDriver</td>
					<td/>
				</tr>
				<tr>
					<td>
						<a href="../docs/api/scriptella/driver/h2/package-summary.html">H2 Database</a>
					</td>
					<td>scriptella.driver.h2.Driver</td>
					<td>org.h2.Driver</td>
					<td/>
				</tr>
			</table>
			<note>
                Scriptella driver's package short name is an alias for driver, e.g. h2 is an alias
                for scriptella.driver.h2.Driver
            </note>
		</section>
		<section>
			<title>Non-relational Datasources Interoperability</title>
			<p>We plan to include built-in support for CSV files and LDAP directories, so
                it would be possible to embed CSV data or LDIF files directly into script files.
            </p>
			<p>Currently we recommend various JDBC bridges to work with specific datasources like directories, CSV files, XML files or object databases.
            </p>
			<section>
				<title>Accessing directories based on LDAP</title>
				<p>The freely available
                    <a href="http://www.openldap.org/jdbcldap/">JDBC-LDAP Bridge Driver</a>
                    (JDBC-LDAP) enables you to access information held in directories.
                </p>
				<p>See
                    <a href="http://www.octetstring.com/support/jdbcldapdriver/GettingStarted.php">Getting Started
                        Documentation</a>
                    .
                </p>
				<p>A similar driver is offered by Novell. See
                    <a href="http://developer.novell.com/ndk/doc/ldapjdbc/">LDAP JDBC Driver</a>
                    for more details.
                </p>
			</section>
			<section>
				<title>Working with CSV data</title>
				<p>
					<a href="http://www.hsqldb.org/doc/guide/ch06.html">HSQLDB text tables</a>
                    feature could be used to work
                    with CSV files.</p>
			</section>
			<section>
				<title>Using Java Code</title>
				<p>Although Scriptella was designed for JDBC/SQL datasources under some circumstances it is
				useful to embed or invoke Java from Scriptella file. The <a href="../docs/api/scriptella/driver/janino/package-summary.html">Janino Provider</a> 
				is bundled with Scriptella distribution and provides a Java bridge. This driver also exposes a set of properties and methods for <a href="../docs/api/scriptella/driver/janino/JaninoScript.html">&lt;script&gt;</a> and <a href="../docs/api/scriptella/driver/janino/JaninoQuery.html">&lt;query&gt;</a> elements.</p>
				<p>Scriptella has no equivalent of Ant Task API, although we provide two alternatives to integrate Java solutions:</p>
				<ul>
					<li>Writing a Service Provider Implementation (Scriptella Driver). This is the most powerful API, but it is harder to implement.</li>
					<li>Calling compiled code from Janino scripting elements. Just specify your jar as an additional class-path entry for Janino connection and you can work with any class from this jar. This approach is easy-to-use and do not add dependencies on Scriptella API to your classes/tasks.</li>
				</ul> 
				<p>Other Java compilers or interpreters can also be plugged in via custom Scriptella Drivers.</p>
			</section>
			<section>
				<title>Producing Reports with Velocity</title>
				<p>Velocity is a Java-based template engine which can be used to generate reports. Most other ETL tools provides custom reporting services, but Scriptella relies on 
				proven open source solutions instead of reinventing the wheel. The built-in <a href="../docs/api/scriptella/driver/velocity/package-summary.html">Velocity Driver</a> 
				allows using velocity templates in &lt;script&gt; elements.Typically velocity report is generated in several steps:</p>
				<ol>
					<li>Printing a header</li>
					<li>Query data from datasource(s) and produce a report body.</li>
					<li>Printing a footer.</li>
				</ol>
				<p><em>Primes</em> example demonstrates how to produce a simple report using Velocity.</p>
				<note>
				Velocity Driver does not support query element. This limitation may be eliminated in future, but currently we do not see Velocity strengths for querying the data.
				JDBC or Janino drivers provide more powerful and easy-to-use solutions for queries.
				</note>
			</section>
			
		</section>
		<section>
			<title>Examples</title>
			<fixme author="ejboy">Describe examples here</fixme>
		</section>
		<section>
			<title>Best Practices</title>
		</section>
	</body>
</document>
