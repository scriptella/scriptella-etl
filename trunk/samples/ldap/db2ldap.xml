<!DOCTYPE scriptella SYSTEM "scriptella.dtd">
<scriptella>
    <description>
        Migrates data from Database to LDAP.
        IMPORTANT NOTES:
        - Do not use extra whitespaces in LDIF entries, because LDIF is whitespace sensitive format
    </description>
    <!--Connection to the in memory database-->
    <connection id="in" driver="org.hsqldb.jdbcDriver" url="jdbc:hsqldb:mem:indb"
                user="sa" password="" classpath="../lib/hsqldb.jar"/>
    <!--Connection to the LDAP-->
    <connection id="out" driver="ldap"
                url="ldap://localhost:389"
                user="cn=root,dc=scriptella" password="secret">
        readonly=true
    </connection>
    <script connection-id="in">
        <!-- Fills the in-memory database with initial data-->
        <include href="dbschema.sql"/>
        INSERT INTO users VALUES ('jjones','janet');
        INSERT INTO users VALUES ('fbloggs','fred');
        INSERT INTO user_roles VALUES ('jjones','admin');
        INSERT INTO user_roles VALUES ('fbloggs','admin');
        INSERT INTO user_roles VALUES ('fbloggs','developer');
    </script>
    <script connection-id="out">
<!--Create static entries hierarchy-->
        <![CDATA[
#Inserts top-level entry
dn: dc=scriptella
objectclass: dcObject
objectclass: organization
o: Company
dc: scriptella

# Define an entry to contain people
dn: ou=people,dc=scriptella
objectClass: organizationalUnit
ou: people

# Define an entry to contain LDAP groups
dn: ou=groups,dc=scriptella
objectClass: organizationalUnit
ou: groups
]]>
        <!--If entries are present - warn and continue execution-->
        <onerror type="javax.naming.NameAlreadyBoundException"/>
    </script>
    <query connection-id="in">
        SELECT user_name,user_pass FROM users;
        <script connection-id="out">
<!--Create user entry.
As always use of CDATA is recommended, but not required-->
<![CDATA[
dn: uid=$user_name,ou=people,dc=scriptella
objectClass: inetOrgPerson
uid: $user_name
sn: $user_name
cn: $user_name
userPassword: $user_pass
]]>
            <!--If entry is present - warn and continue execution-->
            <onerror type="javax.naming.NameAlreadyBoundException"/>
        </script>
    </query>
    <query connection-id="in">
        SELECT DISTINCT role_name FROM user_roles;
        <script connection-id="out">
# Define an entry for the role_name role
dn: cn=$role_name,ou=groups,dc=scriptella
objectClass: groupOfUniqueNames
cn: $role_name
uniqueMember: dc=scriptella
            <!--If entry is present - remove it and retry-->
            <onerror type="javax.naming.NameAlreadyBoundException" retry="true">
dn: cn=$role_name,ou=groups,dc=scriptella
changetype: delete
            </onerror>
        </script>
        <query connection-id="in">
            SELECT user_name FROM user_roles WHERE role_name=?role_name;
            <!-- First user replaces artificial uniqueMember: dc=scriptella
              -->
            <script connection-id="out" if="rownum==1">
# Define an entry for the role_name role
dn: cn=$role_name,ou=groups,dc=scriptella
changetype: modify
replace: uniqueMember
uniqueMember: uid=$user_name,ou=people,dc=scriptella
-
            </script>
            <!-- Subsequent users are added-->
            <script connection-id="out" if="rownum gt 1">
# Define an entry for the role_name role
dn: cn=$role_name,ou=groups,dc=scriptella
changetype: modify
add: uniqueMember
uniqueMember: uid=$user_name,ou=people,dc=scriptella
-
            </script>
        </query>
    </query>

</scriptella>